version: '3.5'

services:
  server:
    image: cortezaproject/corteza:${VERSION}
    restart: always
    env_file: [ .env ]
    depends_on: [ db ]
    volumes: [ "./data/server:/data" ]
    # Connect local as http://localhost:18080/
    ports: [ "18080:80" ]
    environment:
      HTTP_LOG_REQUEST: ${HTTP_LOG_REQUEST}
      HTTP_LOG_RESPONSE: ${HTTP_LOG_RESPONSE}
      LOG_LEVEL: ${LOG_LEVEL}

  corredor:
    image: cortezaproject/corteza-server-corredor:${CORREDOR_VERSION}
    restart: on-failure
    env_file: [ .env ]
    volumes: [ "./scripts:/corredor/scripts" ]
    environment:
      CORREDOR_ADDR: ${CORREDOR_ADDR}
      CORREDOR_ENABLED: ${CORREDOR_ENABLED}
      CORREDOR_LOG_LEVEL: ${CORREDOR_LOG_LEVEL}


  db:
    image: postgres:${POSTGRES_VERSION}
    restart: always
    healthcheck: { test: ["CMD-SHELL", "pg_isready -U corteza"], interval: 10s, timeout: 5s, retries: 5 }
    environment:
      POSTGRES_USER:     ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}

  gotenberg:
    image: gotenberg/gotenberg:8
    restart: on-failure
    ports:
      - "4000:3000"

  swagger-editor:
    container_name: swagger_editor
    image: docker.swagger.io/swaggerapi/swagger-editor
    ports:
      - '8081:8080'
    volumes: [ "./swagger:/swagger" ]
    environment:
      SWAGGER_FILE: "/swagger/swagger.yaml"
